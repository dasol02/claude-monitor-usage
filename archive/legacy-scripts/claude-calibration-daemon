#!/usr/bin/env python3
"""
Claude Calibration Daemon
30분마다 자동으로 보정 실행
"""

import time
import sys
from pathlib import Path
from datetime import datetime
from zoneinfo import ZoneInfo

# calibration_learner 모듈 임포트를 위한 경로 추가
sys.path.insert(0, str(Path.home() / 'claude-monitor'))

try:
    from calibration_learner import calibrate_once, load_calibration_model
except ImportError:
    print("❌ calibration_learner module not found")
    print("   Please ensure calibration_learner.py is in ~/claude-monitor/")
    sys.exit(1)


def daemon_mode(interval_minutes=30):
    """
    데몬 모드로 지속 실행

    Args:
        interval_minutes: 실행 간격 (분), 기본 30분
    """
    tz = ZoneInfo('Asia/Seoul')
    interval_seconds = interval_minutes * 60

    print(f"🔬 Claude Calibration Daemon started")
    print(f"   Interval: {interval_minutes} minutes")
    print(f"   Press Ctrl+C to stop\n")

    try:
        run_count = 0

        while True:
            run_count += 1
            now = datetime.now(tz).strftime('%Y-%m-%d %H:%M:%S')

            print(f"\n{'='*60}")
            print(f"[{now}] Calibration run #{run_count}")
            print(f"{'='*60}")

            # 보정 실행
            try:
                result = calibrate_once()

                if result['status'] == 'success':
                    # 현재 모델 상태 출력
                    model = load_calibration_model()

                    print(f"\n📊 Current Model Status:")
                    print(f"   Samples: {model['sample_count']}")
                    print(f"   Offset: {model['offset_mean']*100:+.2f}%")
                    print(f"   Confidence: {model['confidence']:.2f}")
                    print(f"   Status: {model['status']}")

                    if model['sample_count'] >= 100:
                        print(f"   ✅ Model is ready for production use!")
                    else:
                        remaining = 100 - model['sample_count']
                        print(f"   ⏳ Need {remaining} more samples to reach production")
                else:
                    print(f"⚠️  Calibration failed: {result.get('message', 'Unknown error')}")

            except Exception as e:
                print(f"❌ Error during calibration: {e}")

            # 다음 실행까지 대기
            next_run = datetime.now(tz)
            next_run = next_run.replace(second=0, microsecond=0)
            next_run = next_run.replace(minute=(next_run.minute // interval_minutes + 1) * interval_minutes % 60)
            if next_run.minute == 0:
                next_run = next_run.replace(hour=next_run.hour + 1)

            print(f"\n💤 Sleeping until next run at {next_run.strftime('%H:%M')}...")
            time.sleep(interval_seconds)

    except KeyboardInterrupt:
        print("\n\n✅ Calibration daemon stopped")


def main():
    """메인 함수"""
    import argparse

    parser = argparse.ArgumentParser(description='Claude Calibration Daemon')
    parser.add_argument('--interval', type=int, default=30,
                        help='Calibration interval in minutes (default: 30)')
    parser.add_argument('--once', action='store_true',
                        help='Run once and exit')

    args = parser.parse_args()

    if args.once:
        # 한 번만 실행
        result = calibrate_once()

        if result['status'] == 'success':
            model = load_calibration_model()
            print(f"\n📊 Model Status:")
            print(f"   Samples: {model['sample_count']}")
            print(f"   Confidence: {model['confidence']:.2f}")
            print(f"   Status: {model['status']}")
    else:
        # 데몬 모드
        daemon_mode(args.interval)


if __name__ == '__main__':
    main()
